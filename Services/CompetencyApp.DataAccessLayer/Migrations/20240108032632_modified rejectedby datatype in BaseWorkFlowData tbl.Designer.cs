// <auto-generated />
using System;
using CompetencyApp.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompetencyApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(CompetencyCoreDbContext))]
    [Migration("20240108032632_modified rejectedby datatype in BaseWorkFlowData tbl")]
    partial class modifiedrejectedbydatatypeinBaseWorkFlowDatatbl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CoreSchema")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.AssignJobGradeGroup", b =>
                {
                    b.Property<int>("AssignJobGradeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignJobGradeGroupId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("JobGradeGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("JobGradeId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("AssignJobGradeGroupId");

                    b.HasIndex("JobGradeGroupId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("AssignJobGradeGroups", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.BehavioralCompetency", b =>
                {
                    b.Property<int>("BehavioralCompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BehavioralCompetencyId"));

                    b.Property<int>("CompetencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("JobGradeGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("BehavioralCompetencyId");

                    b.HasIndex("JobGradeGroupId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("CompetencyId", "JobGradeGroupId")
                        .IsUnique();

                    b.ToTable("BehavioralCompetencies", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.Competency", b =>
                {
                    b.Property<int>("CompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<int>("CompetencyCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CompetencyName")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRejected")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompetencyId");

                    b.HasIndex("CompetencyCategoryId");

                    b.HasIndex("CompetencyName")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Competencies", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyCategory", b =>
                {
                    b.Property<int>("CompetencyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyCategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTechnical")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompetencyCategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("CompetencyCategories", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyCategoryGrading", b =>
                {
                    b.Property<int>("CompetencyCategoryGradingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyCategoryGradingId"));

                    b.Property<int>("CompetencyCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<double>("WeightPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("CompetencyCategoryGradingId");

                    b.HasIndex("CompetencyCategoryId");

                    b.HasIndex("ReviewTypeId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("CompetencyCategoryGradings", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyRatingDefinition", b =>
                {
                    b.Property<int>("CompetencyRatingDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyRatingDefinitionId"));

                    b.Property<int>("CompetencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompetencyRatingDefinitionId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("CompetencyRatingDefinitions", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyReview", b =>
                {
                    b.Property<int>("CompetencyReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyReviewId"));

                    b.Property<int>("ActualRatingId")
                        .HasColumnType("integer");

                    b.Property<string>("ActualRatingName")
                        .HasColumnType("text");

                    b.Property<int>("ActualRatingValue")
                        .HasColumnType("integer");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeDepartment")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeGrade")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeInitial")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<int>("ExpectedRatingId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTechnical")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReviewPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompetencyReviewId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("ExpectedRatingId");

                    b.HasIndex("ReviewPeriodId");

                    b.HasIndex("ReviewTypeId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("CompetencyReviews", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyReviewProfile", b =>
                {
                    b.Property<int>("CompetencyReviewProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetencyReviewProfileId"));

                    b.Property<int>("AverageRatingId")
                        .HasColumnType("integer");

                    b.Property<string>("AverageRatingName")
                        .HasColumnType("text");

                    b.Property<int>("AverageRatingValue")
                        .HasColumnType("integer");

                    b.Property<double>("AverageScore")
                        .HasColumnType("double precision");

                    b.Property<string>("CompetencyCategoryName")
                        .HasColumnType("text");

                    b.Property<int>("CompetencyGap")
                        .HasColumnType("integer");

                    b.Property<int>("CompetencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CompetencyName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .HasColumnType("text");

                    b.Property<string>("DivisionName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<int>("ExpectedRatingId")
                        .HasColumnType("integer");

                    b.Property<string>("ExpectedRatingName")
                        .HasColumnType("text");

                    b.Property<int>("ExpectedRatingValue")
                        .HasColumnType("integer");

                    b.Property<string>("GradeName")
                        .HasColumnType("text");

                    b.Property<bool>("HaveGap")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobRoleId")
                        .HasColumnType("text");

                    b.Property<string>("JobRoleName")
                        .HasColumnType("text");

                    b.Property<string>("OfficeId")
                        .HasColumnType("text");

                    b.Property<string>("OfficeName")
                        .HasColumnType("text");

                    b.Property<int>("ReviewPeriodId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewPeriodName")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompetencyReviewProfileId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("CompetencyReviewProfiles", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.DevelopmentPlan", b =>
                {
                    b.Property<int>("DevelopmentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DevelopmentPlanId"));

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<int?>("CompetencyReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("CompetencyReviewProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LearningResource")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("TrainingTypeName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DevelopmentPlanId");

                    b.HasIndex("CompetencyReviewId");

                    b.HasIndex("CompetencyReviewProfileId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("DevelopmentPlans", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobGrade", b =>
                {
                    b.Property<int>("JobGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobGradeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GradeCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("GradeName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("JobGradeId");

                    b.HasIndex("GradeCode")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("JobGrades", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobGradeGroup", b =>
                {
                    b.Property<int>("JobGradeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobGradeGroupId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("JobGradeGroupId");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("JobGradeGroups", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRole", b =>
                {
                    b.Property<int>("JobRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobRoleId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobRoleName")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("JobRoleId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("JobRoles", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRoleCompetency", b =>
                {
                    b.Property<int>("JobRoleCompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobRoleCompetencyId"));

                    b.Property<int>("CompetencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReviewPeriodId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("JobRoleCompetencyId");

                    b.HasIndex("JobRoleId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReviewPeriodId");

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("CompetencyId", "JobRoleId", "OfficeId")
                        .IsUnique();

                    b.ToTable("JobRoleCompetencies", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRoleGrade", b =>
                {
                    b.Property<int>("JobRoleGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobRoleGradeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GradeId")
                        .HasColumnType("text");

                    b.Property<string>("GradeName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("JobRoleGradeId");

                    b.HasIndex("JobRoleId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("JobRoleGrades", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.OfficeJobRole", b =>
                {
                    b.Property<int>("OfficeJobRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfficeJobRoleId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("OfficeJobRoleId");

                    b.HasIndex("JobRoleId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("OfficeJobRole", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Ratings", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.ReviewPeriod", b =>
                {
                    b.Property<int>("ReviewPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewPeriodId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<int>("BankYearId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateApproved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRejected")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ReviewPeriodId");

                    b.HasIndex("BankYearId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("ReviewPeriods", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.ReviewType", b =>
                {
                    b.Property<int>("ReviewTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ReviewTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ReviewTypeId");

                    b.HasIndex("ReviewTypeName")
                        .IsUnique();

                    b.HasIndex("SoftDeleted");

                    b.ToTable("ReviewTypes", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.TrainingType", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingTypeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("TrainingTypeName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("TrainingTypeId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("TrainingTypes", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.BankYear", b =>
                {
                    b.Property<int>("BankYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankYearId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("YearName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("BankYearId");

                    b.HasIndex("SoftDeleted");

                    b.HasIndex("YearName")
                        .IsUnique();

                    b.ToTable("BankYears", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("PermissionId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Permissions", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RolePermissionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("RolePermissions", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBranch")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Department", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Directorate", b =>
                {
                    b.Property<int>("DirectorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectorateId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DirectorateCode")
                        .HasColumnType("text");

                    b.Property<string>("DirectorateName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DirectorateId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Directorates", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DivisionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("DivisionCode")
                        .HasColumnType("text");

                    b.Property<string>("DivisionName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DivisionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Divisions", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfficeId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OfficeCode")
                        .HasColumnType("text");

                    b.Property<string>("OfficeName")
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("OfficeId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SoftDeleted");

                    b.ToTable("Offices", "CoreSchema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "CoreSchema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "CoreSchema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "CoreSchema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "CoreSchema");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "CoreSchema");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.AssignJobGradeGroup", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobGradeGroup", "JobGradeGroup")
                        .WithMany("AssignJobGradeGroups")
                        .HasForeignKey("JobGradeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobGrade", "JobGrade")
                        .WithMany("AssignJobGradeGroups")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobGrade");

                    b.Navigation("JobGradeGroup");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.BehavioralCompetency", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Competency", "Competency")
                        .WithMany()
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobGradeGroup", "JobGradeGroup")
                        .WithMany("BehavioralCompetencies")
                        .HasForeignKey("JobGradeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("JobGradeGroup");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.Competency", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.CompetencyCategory", "CompetencyCategory")
                        .WithMany("Competencies")
                        .HasForeignKey("CompetencyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyCategory");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyCategoryGrading", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.CompetencyCategory", "CompetencyCategory")
                        .WithMany("CompetencyCategoryGradings")
                        .HasForeignKey("CompetencyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.ReviewType", "ReviewType")
                        .WithMany("CompetencyCategoryGradings")
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyCategory");

                    b.Navigation("ReviewType");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyRatingDefinition", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Competency", "Competency")
                        .WithMany("CompetencyRatingDefinitions")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Rating", "Rating")
                        .WithMany("CompetencyRatingDefinitions")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyReview", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Competency", "Competency")
                        .WithMany("CompetencyReviews")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Rating", "ExpectedRating")
                        .WithMany("CompetencyReviews")
                        .HasForeignKey("ExpectedRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.ReviewPeriod", "ReviewPeriod")
                        .WithMany("CompetencyReviews")
                        .HasForeignKey("ReviewPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.ReviewType", "ReviewType")
                        .WithMany("CompetencyReviews")
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("ExpectedRating");

                    b.Navigation("ReviewPeriod");

                    b.Navigation("ReviewType");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.DevelopmentPlan", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.CompetencyReview", null)
                        .WithMany("DevelopmentPlans")
                        .HasForeignKey("CompetencyReviewId");

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.CompetencyReviewProfile", "CompetencyReviewProfile")
                        .WithMany("DevelopmentPlans")
                        .HasForeignKey("CompetencyReviewProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyReviewProfile");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRoleCompetency", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Competency", "Competency")
                        .WithMany()
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobRole", "JobRole")
                        .WithMany("JobRoleCompetencies")
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.Organogram.Office", "Office")
                        .WithMany("JobRoleCompetencies")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.Rating", "Rating")
                        .WithMany("JobRoleCompetencies")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.CompetencyMgt.ReviewPeriod", null)
                        .WithMany("JobRoleCompetencies")
                        .HasForeignKey("ReviewPeriodId");

                    b.Navigation("Competency");

                    b.Navigation("JobRole");

                    b.Navigation("Office");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRoleGrade", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobRole", "JobRole")
                        .WithMany("JobRoleGrades")
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.OfficeJobRole", b =>
                {
                    b.HasOne("CompetencyApp.Models.CompetencyMgt.JobRole", "JobRole")
                        .WithMany("OfficeJobRoles")
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.Organogram.Office", "Office")
                        .WithMany("OfficeJobRoles")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobRole");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.ReviewPeriod", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.BankYear", "BankYear")
                        .WithMany("ReviewPeriods")
                        .HasForeignKey("BankYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankYear");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.RolePermission", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.Core.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Department", b =>
                {
                    b.HasOne("CompetencyApp.Models.Organogram.Directorate", "Directorate")
                        .WithMany("Departments")
                        .HasForeignKey("DirectorateId");

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Division", b =>
                {
                    b.HasOne("CompetencyApp.Models.Organogram.Department", "Department")
                        .WithMany("Divisions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Office", b =>
                {
                    b.HasOne("CompetencyApp.Models.Organogram.Division", "Division")
                        .WithMany("Offices")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencyApp.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CompetencyApp.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.Competency", b =>
                {
                    b.Navigation("CompetencyRatingDefinitions");

                    b.Navigation("CompetencyReviews");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyCategory", b =>
                {
                    b.Navigation("Competencies");

                    b.Navigation("CompetencyCategoryGradings");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyReview", b =>
                {
                    b.Navigation("DevelopmentPlans");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.CompetencyReviewProfile", b =>
                {
                    b.Navigation("DevelopmentPlans");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobGrade", b =>
                {
                    b.Navigation("AssignJobGradeGroups");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobGradeGroup", b =>
                {
                    b.Navigation("AssignJobGradeGroups");

                    b.Navigation("BehavioralCompetencies");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.JobRole", b =>
                {
                    b.Navigation("JobRoleCompetencies");

                    b.Navigation("JobRoleGrades");

                    b.Navigation("OfficeJobRoles");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.Rating", b =>
                {
                    b.Navigation("CompetencyRatingDefinitions");

                    b.Navigation("CompetencyReviews");

                    b.Navigation("JobRoleCompetencies");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.ReviewPeriod", b =>
                {
                    b.Navigation("CompetencyReviews");

                    b.Navigation("JobRoleCompetencies");
                });

            modelBuilder.Entity("CompetencyApp.Models.CompetencyMgt.ReviewType", b =>
                {
                    b.Navigation("CompetencyCategoryGradings");

                    b.Navigation("CompetencyReviews");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.ApplicationRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.BankYear", b =>
                {
                    b.Navigation("ReviewPeriods");
                });

            modelBuilder.Entity("CompetencyApp.Models.Core.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Department", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Directorate", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Division", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("CompetencyApp.Models.Organogram.Office", b =>
                {
                    b.Navigation("JobRoleCompetencies");

                    b.Navigation("OfficeJobRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
